Installation:
	Mac:
		install	homebrew: package manager
		install git
			brew install git
		install RVM: ruby version manager
			www.rvm.beginrescueend.com
		install ruby
			rvm install 1.9.3
		tell rvm which ruby version you wanna use
			rvm use 1.9.3

Bash command: irb
	shuais-mbp:ruby Jack$ irb
	1.9.3-p392 :001 > 

Variable Types:
	local variable
	instance var
		@var
	global variable
		top of the file
		put a '$' in front 
			$toppings = false OR
			$TOPPINGS  = false
	constant
		AVA=1
	class name
		Capitalize the first Letter

control flow
	if elsif else end
	case 
		when 1 
			puts 
		when 2 
			puts xxx 
	end

object and classes
	object.class #find what class is belong to
	see example:
		BankAccount.rb

String
	String.new # create a new string
	String.new("Hello")
	s = String.new("hello")
	puts s
	# nil means nth is returned
	single quote is okay  'ccccccc'
		sss= 'sssssss'
	double qutoes is fine too
		ssss = "xxxxxxx"
	the difference between '' and "" is:
		the content inside of '' will NOT be interpreted
		ex:
			1.9.3p392 :011 > name = "jack"
 			=> "jack" 

			1.9.3p392 :015 > puts "Hello #{name}"
			Hello jack
							 
			1.9.3p392 :016 > puts 'Hello #{name}'
			Hello #{name}
    other ways to create interpolated string beside "":
    	1.9.3p392 :023 >   name =%{Jack}       	#interpolated string
    	 => "Jack" 
		1.9.3p392 :024 > name
		 => "Jack" 
		1.9.3p392 :025 > name = %q{Jack}		# not interpolated string
		 => "Jack" 
		1.9.3p392 :026 > name = %|Jack|			# you can use any string beside {}
		 => "Jack" 
		1.9.3p392 :027 > 
		1.9.3p392 :028 >   name = <<-STR
		1.9.3p392 :029"> jack
		1.9.3p392 :030"> STR
		 => "jack\n" 

Special Characters and escaping
	'\n'
Working With Strings
 	1.9.3p392 :048 > string = "Hello world\n"
	 => "Hello world\n" 
	 1.9.3p392 :049 > string.inspect
	 => "\"Hello world\\n\"" 
	1.9.3p392 :050 > puts string.inspect
	"Hello world\n"
	 => nil 
	1.9.3p392 :051 > puts string.cho
	string.chomp   string.chomp!  string.chop    string.chop!   
	1.9.3p392 :051 > puts string.chomp
	Hello world
	 => nil 
	1.9.3p392 :052 > 
	1.9.3p392 :053 >   string.chop
	 => "Hello world" 
	1.9.3p392 :054 > 
	1.9.3p392 :055 >   
	1.9.3p392 :056 >   string.include?("world"))
	SyntaxError: (irb):56: syntax error, unexpected ')', expecting $end
		from /usr/local/rvm/rubies/ruby-1.9.3-p392/bin/irb:16:in `<main>'
	1.9.3p392 :057 > string.include?("world")
	 => true 
	1.9.3p392 :058 > 
	1.9.3p392 :059 >   string
	 => "Hello world\n" 
	1.9.3p392 :060 > string.replace("jason")
	 => "jason" 
	1.9.3p392 :061 > 
	1.9.3p392 :062 >   string
	 => "jason" 
	1.9.3p392 :063 > string.index("a")
	 => 1 
	1.9.3p392 :064 > 


	http://ruby-doc.org/core-1.9.3/
	http://www.ascii-code.com

	1.9.3p392 :068 >   string = "hello world"
	 => "hello world" 
	1.9.3p392 :069 > string.reverse
	 => "dlrow olleh" 
	1.9.3p392 :070 > string.up
	string.upcase   string.upcase!  string.upto     
	1.9.3p392 :070 > string.upcase
	 => "HELLO WORLD" 
	1.9.3p392 :071 > string
	 => "hello world" 
	1.9.3p392 :072 > string.downcase
	 => "hello world" 
	1.9.3p392 :073 > string.upcase!
	 => "HELLO WORLD" 
	1.9.3p392 :074 > string
	 => "HELLO WORLD" 
	1.9.3p392 :075 > string.swapcase
	 => "hello world" 
	1.9.3p392 :076 > string
	 => "HELLO WORLD" 
	1.9.3p392 :077 > string.swapcase!
	 => "hello world" 
	1.9.3p392 :078 > string
	 => "hello world" 
	1.9.3p392 :079 > string.length
	 => 11 
	1.9.3p392 :080 > string.size
	 => 11 
	1.9.3p392 :081 > string.split
	string.split
	1.9.3p392 :081 > string.split(" ")
	 => ["hello", "world"] 
	1.9.3p392 :082 > string
	 => "hello world" 
	1.9.3p392 :086 >   string2 = "hello world how are you"
	 => "hello world how are you" 
	1.9.3p392 :087 > string.split(" ")
	 => ["hello", "world"] 
	1.9.3p392 :088 > string2.split(" ")
	 => ["hello", "world", "how", "are", "you"] 
	1.9.3p392 :095 > string2.concat( " Another thing")
	 => "hello world how are you Another thing" 
	1.9.3p392 :098 > string2.reverse
	 => "gniht rehtonA uoy era woh dlrow olleh" 
	1.9.3p392 :099 > string2
	 => "hello world how are you Another thing" 
	1.9.3p392 :100 > string2.reverse!
	 => "gniht rehtonA uoy era woh dlrow olleh" 
	1.9.3p392 :101 > string2
	 => "gniht rehtonA uoy era woh dlrow olleh" 
	1.9.3p392 :102 > 


Numbers

	1.9.3p392 :005 > number =100
	 => 100 
	1.9.3p392 :006 > number.class
	 => Fixnum 
	1.9.3p392 :007 > number = 100.5
	 => 100.5 
	1.9.3p392 :008 > number.class
	 => Float 
	1.9.3p392 :009 > string = "10"
	 => "10" 
	1.9.3p392 :010 > number= string.to_i
	 => 10 
	1.9.3p392 :011 > number.class
	 => Fixnum 
	1.9.3p392 :012 > number = string.to_f
	 => 10.0 
	1.9.3p392 :013 > number.class
	 => Float 
	1.9.3p392 :014 > string = "100.50"
	 => "100.50" 
	1.9.3p392 :015 > number = string.to_i
	 => 100 
	1.9.3p392 :016 > number = string.to_f
	 => 100.5 
	1.9.3p392 :017 > 
	1.9.3p392 :018 >   
	1.9.3p392 :024 >   5e10
	 => 50000000000.0 
	 1.9.3p392 :027 > number = 100
	 => 100 
	1.9.3p392 :028 > number.size
	 => 8 # return how many bytes used in your computer

	1.9.3p392 :003 >   10+10
	 => 20 
	1.9.3p392 :004 > 10-10
	 => 0 
	1.9.3p392 :005 > 10*10
	 => 100 
	1.9.3p392 :006 > 10/10
	 => 1 
	1.9.3p392 :007 > 10 % 10
	 => 0 
	1.9.3p392 :008 > 10 ** 2
	 => 100 
	1.9.3p392 :009 > 10 ** 3
	 => 1000 
	1.9.3p392 :010 > number = 10
	 => 10 
	1.9.3p392 :011 > number += 10
	 => 20 
	1.9.3p392 :012 > number
	 => 20 
	1.9.3p392 :013 > number -= 10
	 => 10 
	1.9.3p392 :014 > number
	 => 10 
	1.9.3p392 :015 > number *= 10
	 => 100 
	1.9.3p392 :016 > number
	 => 100 
	1.9.3p392 :017 > number /= 1
	 => 10 
	1.9.3p392 :018 > number **= 10 
	 => 10000000000

	 notes:
		 <=> #combined comparison operator
		 	return 0 if both sides are equal
		 	return 1 if left side is bigger
		 	return -1 if right side is bigger

		 equ?() # check type AND value
		
	1.9.3p392 :002 > a=10
	 => 10 
	1.9.3p392 :003 > b=20
	 => 20 
	1.9.3p392 :004 > a == b
	 => false 
	1.9.3p392 :005 > a != b
	 => true 
	1.9.3p392 :006 > a > b
	 => false 
	1.9.3p392 :007 > a < b
	 => true 
	1.9.3p392 :008 > c = 10 
	 => 10 
	1.9.3p392 :009 > puts a , b , c
	10
	20
	10
	 => nil 
	1.9.3p392 :010 > a <= c
	 => true 
	1.9.3p392 :011 > b <= c
	 => false 
	1.9.3p392 :012 > 
	1.9.3p392 :013 >   a<=>b
	 => -1 
	1.9.3p392 :014 > 
	1.9.3p392 :015 >   a<=>c
	 => 0 
	1.9.3p392 :016 > a.eql?(c)
	 => true 
	1.9.3p392 :017 > d=10.0
	 => 10.0 
	1.9.3p392 :018 > a.eql?(d)
	 => false 

MATH
http://ruby-doc.org/core-1.9.3/Math.html
	1.9.3p392 :003 > Math::E
	 => 2.718281828459045 
	1.9.3p392 :004 > Math::PI
	 => 3.141592653589793 
	1.9.3p392 :005 > 
	1.9.3p392 :006 >   Math.log(12)
	 => 2.4849066497880004 
	1.9.3p392 :007 > Math.log(12,3)
	 => 2.2618595071429146 
	1.9.3p392 :008 > Math.log(Math::E)
	 => 1.0 
	1.9.3p392 :009 > Math.log(Math::PI)
	 => 1.1447298858494002 

	 1.9.3p392 :012 >   rand
	 => 0.015188013387267163 
	1.9.3p392 :013 > rand
	 => 0.7124095040444662 
	1.9.3p392 :014 > rand
	 => 0.09022312880419947 
	1.9.3p392 :015 > rand
	 => 0.8213188685917254 
	1.9.3p392 :016 > rand 100
	 => 76 
	1.9.3p392 :017 > rand 20
	 => 6 
	1.9.3p392 :018 > rand 15
	 => 7 
	1.9.3p392 :019 > rand 15
	 => 12 
	1.9.3p392 :020 > rand 15
	 => 10 
	1.9.3p392 :021 > number = 100.5
	 => 100.5 
	1.9.3p392 :022 > number.class
	 => Float 
	1.9.3p392 :023 > sprintf("$%0.2f",number)
	 => "$100.50"


	1.9.3p392 :036 >   7.3-7.2
	 => 0.09999999999999964 
	 1.9.3p392 :042 >   require "bigdecimal"
	 => true 
	1.9.3p392 :043 > a = BigDecimal.new("7.3")
	 => #<BigDecimal:10084c2f8,'0.73E1',18(18)> 
	1.9.3p392 :044 > b = BigDecimal.new("7.2")
	 => #<BigDecimal:100841358,'0.72E1',18(18)> 
	1.9.3p392 :045 > c = a -b
	 => #<BigDecimal:100836480,'0.1E0',9(36)> 
	1.9.3p392 :046 > c
	 => #<BigDecimal:100836480,'0.1E0',9(36)> 
	1.9.3p392 :048 > puts c
	0.1E0
	 => nil 


currency
	 http://money.rubyforge.org
Jack$ gem install money
	Fetching: money-5.1.1.gem (100%)
	Successfully installed money-5.1.1
	1 gem installed
	Installing ri documentation for money-5.1.1...
	Installing RDoc documentation for money-5.1.1...
	mustafa:ruby Jack$ 

	1.9.3p392 :005 >   price = Money.new(1000)
	 => #<Money fractional:1000 currency:USD> 
	1.9.3p392 :006 > puts pri
	price            print            printf           private          private_methods
	1.9.3p392 :006 > puts price
	10.00
	 => nil 
	1.9.3p392 :007 > tax = Money.new(300)
	 => #<Money fractional:300 currency:USD> 
	1.9.3p392 :008 > price + tax
	 => #<Money fractional:1300 currency:USD> 
	1.9.3p392 :009 > total = price + tax
	 => #<Money fractional:1300 currency:USD> 
	1.9.3p392 :010 > puts total
	13.00
	 => nil 

Arrays
	http://ruby-doc.org/core-1.9.3/Array.html
	Array can contain pretty much everything
	1.9.3p392 :001 > array = Array.new
	 => [] 
	1.9.3p392 :002 > array.push(1)
	 => [1] 
	1.9.3p392 :003 > array = []
	 => [] 
	1.9.3p392 :004 > array
	 => [] 
	1.9.3p392 :005 > array << 2
	 => [2] 
	1.9.3p392 :006 > array << 3
	 => [2, 3] 
	1.9.3p392 :007 > array
	 => [2, 3] 
	1.9.3p392 :008 > array << "hello world"
	 => [2, 3, "hello world"] 
	1.9.3p392 :009 > array.pop
	 => "hello world" 
	1.9.3p392 :010 > array
	 => [2, 3] 
	1.9.3p392 :011 > array.
	Display all 153 possibilities? (y or n)
	1.9.3p392 :011 > array.length
	 => 2 
	1.9.3p392 :012 > array.si
	array.singleton_class    array.singleton_methods  array.size               
	1.9.3p392 :012 > array.si
	array.singleton_class    array.singleton_methods  array.size               
	1.9.3p392 :012 > array.size
	 => 2 
	1.9.3p392 :013 > array += [4]
	 => [2, 3, 4] 
	1.9.3p392 :015 > array.index(0)
	 => nil 
	1.9.3p392 :016 > array.index(3)
	 => 1 
	1.9.3p392 :017 > array[1]
	 => 3 


	1.9.3p392 :037 >   array1 = [1,2,3]
	 => [1, 2, 3] 
	1.9.3p392 :038 > array2 = [4,5,6]
	 => [4, 5, 6] 
	1.9.3p392 :039 > array1
	 => [1, 2, 3] 
	1.9.3p392 :040 > array2
	 => [4, 5, 6] 
	1.9.3p392 :041 > array1[0]
	 => 1 
	1.9.3p392 :042 > array[-1]
	 => 4 
	1.9.3p392 :043 > array1[-1]
	 => 3 
	1.9.3p392 :044 > array1[-3]
	 => 1 
	1.9.3p392 :045 > array1.first
	 => 1 
	1.9.3p392 :046 > array1.last
	 => 3 
	1.9.3p392 :047 > 
	1.9.3p392 :048 >   
	1.9.3p392 :049 >   
	1.9.3p392 :050 >   
	1.9.3p392 :051 >   array1 & array2
	 => [] 
	1.9.3p392 :052 > array1
	 => [1, 2, 3] 
	1.9.3p392 :053 > array1 & [2,3,4]
	 => [2, 3] 
	1.9.3p392 :054 > array1.slice(1)
	 => 2 
	1.9.3p392 :055 > 
	1.9.3p392 :056 >   array1
	 => [1, 2, 3] 
	1.9.3p392 :057 > array1.slice(1,2)
	 => [2, 3] 
	1.9.3p392 :058 > array1.slice(0)
	 => 1 
	1.9.3p392 :059 > array1.slice!(1,2)
	 => [2, 3] 
	1.9.3p392 :060 > array1
	 => [1] 


	1.9.3p392 :062 >   
	1.9.3p392 :063 >   array1.unshift(2)
	 => [2, 1] 
	1.9.3p392 :064 > array1
	 => [2, 1] 
	1.9.3p392 :065 > array1.at(0)
	 => 2 
	1.9.3p392 :066 > array1.rindex(2)
	 => 0 
	1.9.3p392 :067 > 
	1.9.3p392 :068 >   array1
	 => [2, 1] 
	1.9.3p392 :069 > 
	1.9.3p392 :070 >   array1.clear
	 => [] 
	1.9.3p392 :071 > array1
	 => [] 



	 1.9.3p392 :074 >   
	1.9.3p392 :075 >   array1 = [1,2,3]
	 => [1, 2, 3] 
	1.9.3p392 :076 > array1.push([3,4,5])
	 => [1, 2, 3, [3, 4, 5]] 
	1.9.3p392 :077 > array1
	 => [1, 2, 3, [3, 4, 5]] 
	1.9.3p392 :078 > array1.flatten
	 => [1, 2, 3, 3, 4, 5] 
	1.9.3p392 :079 > array1
	 => [1, 2, 3, [3, 4, 5]] 
	1.9.3p392 :080 > array1.flatten!
	 => [1, 2, 3, 3, 4, 5] 
	1.9.3p392 :081 > array1
	 => [1, 2, 3, 3, 4, 5] 
	1.9.3p392 :082 > 


	#sort and comparison

	1.9.3p392 :095 >   array= [5,4,6,6,1,9]
	 => [5, 4, 6, 6, 1, 9] 
	1.9.3p392 :096 > array.sort
	 => [1, 4, 5, 6, 6, 9] 
	1.9.3p392 :097 > array.sort!
	 => [1, 4, 5, 6, 6, 9] 
	1.9.3p392 :098 > array
	 => [1, 4, 5, 6, 6, 9] 

	 1.9.3p392 :106 > array= [5,4,6,6,1,9]
	 => [5, 4, 6, 6, 1, 9] 
	1.9.3p392 :107 > 
	1.9.3p392 :108 >   array.sort{|a,b| a<=>b}
	 => [1, 4, 5, 6, 6, 9] 
	1.9.3p392 :109 > array.sort{|a,b| b<=>a}
	 => [9, 6, 6, 5, 4, 1] 
	1.9.3p392 :110 > array.sort.reverse
	 => [9, 6, 6, 5, 4, 1] 
	1.9.3p392 :111 > array.uniq
	 => [5, 4, 6, 1, 9] 
	1.9.3p392 :112 > array
	 => [5, 4, 6, 6, 1, 9] 
	1.9.3p392 :113 > array.uniq!
	 => [5, 4, 6, 1, 9] 
	1.9.3p392 :114 > array
	 => [5, 4, 6, 1, 9] 
	1.9.3p392 :115 > 


	#iteration

	1.9.3p392 :136 >   array.all?
	 => true 
	1.9.3p392 :137 > array.all? {|item| item >3}
	 => false 
	1.9.3p392 :138 > array
	 => [5, 4, 6, 1, 9] 
	1.9.3p392 :139 > array.any? {|item| item >3}
	 => true 
	1.9.3p392 :140 > 
	1.9.3p392 :141 >   array.select {|item| item>3}
	 => [5, 4, 6, 9] 
	1.9.3p392 :142 > 
	1.9.3p392 :143 >   array.reject {|item| item >3}
	 => [1] 
	1.9.3p392 :144 > array.map {|item| item * 2}
	 => [10, 8, 12, 2, 18] 
	1.9.3p392 :146 > array.collect{|item| item * 2}
	 => [10, 8, 12, 2, 18] 
	1.9.3p392 :147 > array
	 => [5, 4, 6, 1, 9] 
	1.9.3p392 :148 > array.collect! {|item| item * 2}
	 => [10, 8, 12, 2, 18] 
	1.9.3p392 :149 > array
	 => [10, 8, 12, 2, 18] 



Hashes
	A hash is a container for data. 
	It can store any data like array
	but it sorts data in {key,value} format instead of index like array

	mustafa:ruby Jack$ gem install awesome_print
	Fetching: awesome_print-1.2.0.gem (100%)
	Successfully installed awesome_print-1.2.0
	1 gem installed
	Installing ri documentation for awesome_print-1.2.0...
	Installing RDoc documentation for awesome_print-1.2.0...

	# awesome install is not necessary, it will just will print nice hash format

	mustafa:ruby Jack$ irb
	1.9.3p392 :001 > 
	1.9.3p392 :002 >   require 'rubygems'
	 => false 
	1.9.3p392 :003 > require 'rubygems'
	 => false 

	1.9.3p392 :005 > h = Hash.new
	 => {} 
	1.9.3p392 :006 > h
	 => {} 
	1.9.3p392 :007 > h = {"hello" => "world"}
	 => {"hello"=>"world"} 
	1.9.3p392 :008 > ap h
	{
	    "hello" => "world"
	}
	 => nil 
	1.9.3p392 :009 > h["name"] = "jack"
	 => "jack" 
	1.9.3p392 :010 > h
	 => {"hello"=>"world", "name"=>"jack"} 
	1.9.3p392 :011 > ap h
	{
	    "hello" => "world",
	     "name" => "jack"
	}
	 => nil 
	1.9.3p392 :012 > h = {"name" => "jack", "hello" => "world"}
	 => {"name"=>"jack", "hello"=>"world"} 
	1.9.3p392 :013 > ap h
	{
	     "name" => "jack",
	    "hello" => "world"
	}
	 => nil 
	1.9.3p392 :014 > 
	1.9.3p392 :015 >   treehouse = Hash.new
	 => {} 
	1.9.3p392 :016 > treehouse["a"] = "1"
	 => "1" 
	1.9.3p392 :017 > treehouse["b"] = "2"
	 => "2" 
	1.9.3p392 :018 > treehouse["c"] = "3"
	 => "3" 
	1.9.3p392 :019 > ap h
	{
	     "name" => "jack",
	    "hello" => "world"
	}
	 => nil 
	1.9.3p392 :020 > ap treehouse
	{
	    "a" => "1",
	    "b" => "2",
	    "c" => "3"
	}
	 => nil 
	1.9.3p392 :021 > treehouse['a']
	 => "1" 
	1.9.3p392 :022 > h = Hash.new {|hash, key| hash[key] = "default valude of"}
	 => {} 
	1.9.3p392 :023 > 
	1.9.3p392 :024 >   h = Hash.new {|hash, key| hash[key] = "default valude for #{key}" }
	 => {} 
	1.9.3p392 :025 > h['hello']
	 => "default valude for hello" 
	1.9.3p392 :026 > ap h
	{
	    "hello" => "default valude for hello"
	}
	 => nil 
	1.9.3p392 :027 > h[0]
	 => "default valude for 0" 
	1.9.3p392 :028 > ap h
	{
	    "hello" => "default valude for hello",
	          0 => "default valude for 0"
	}
	 => nil 



	 # Keys and Values

	1.9.3p392 :030 >   ap treehouse
	{
	    "a" => "1",
	    "b" => "2",
	    "c" => "3"
	}
	 => nil 
	1.9.3p392 :031 > treehouse.keys
	 => ["a", "b", "c"] 

	 1.9.3p392 :033 > treehouse.values
	 => ["1", "2", "3"] 
	1.9.3p392 :034 > treehouse.key('1')
	 => "a" 
	1.9.3p392 :035 > treehouse.key("1")
	 => "a" 
	1.9.3p392 :038 > treehouse['a']
	 => "1" 
	1.9.3p392 :067 > treehouse.has_value?('1')
	 => true 
	1.9.3p392 :068 > treehouse.values_at('1')
	 => [nil] 
	1.9.3p392 :069 > treehouse.values_at('a')
	 => ["1"] 
	1.9.3p392 :070 > treehouse.values_at('b')
	 => ["2"] 
	1.9.3p392 :071 > treehouse.values_at('c')
	 => ["3"] 


	 # working with hashes
	1.9.3p392 :076 >   h = Hash.new
	 => {} 
	1.9.3p392 :077 > h.empty?
	 => true 
	1.9.3p392 :078 > 
	1.9.3p392 :079 >   ap treehouse
	{
	    "a" => "1",
	    "b" => "2",
	    "c" => "3"
	}
	 => nil 
	1.9.3p392 :080 > ap h
	{}
	 => nil 
	1.9.3p392 :081 > 
	1.9.3p392 :082 >   treehouse.de
	treehouse.default                  treehouse.define_singleton_method
	treehouse.default=                 treehouse.delete
	treehouse.default_proc             treehouse.delete_if
	treehouse.default_proc=            treehouse.detect
	1.9.3p392 :082 >   treehouse.delete('a')
	 => "1" 
	1.9.3p392 :083 > ap treehouse
	{
	    "b" => "2",
	    "c" => "3"
	}
	 => nil 
	1.9.3p392 :084 > treehouse.clear
	 => {} 
	1.9.3p392 :085 > ap treehouse
	{}
	 => nil 
	1.9.3p392 :086 > treehouse.empty?
	 => true 
	1.9.3p392 :087 > treehouse = {
	1.9.3p392 :088 >         "a" => "1",
	1.9.3p392 :089 >         "b" => "2",
	1.9.3p392 :090 >         "c" => "3"
	1.9.3p392 :091?>   }
	 => {"a"=>"1", "b"=>"2", "c"=>"3"} 
	1.9.3p392 :092 >  
	1.9.3p392 :093 >   ap treehouse
	{
	    "a" => "1",
	    "b" => "2",
	    "c" => "3"
	}
	 => nil 
	1.9.3p392 :094 > ap treehouse.to_a
	[
	    [0] [
	        [0] "a",
	        [1] "1"
	    ],
	    [1] [
	        [0] "b",
	        [1] "2"
	    ],
	    [2] [
	        [0] "c",
	        [1] "3"
	    ]
	]
	 => nil 
	1.9.3p392 :095 > array = treehouse.to_a
	 => [["a", "1"], ["b", "2"], ["c", "3"]] 
	1.9.3p392 :096 > array[0]
	 => ["a", "1"] 
	1.9.3p392 :097 > array[0][1]
	 => "1" 
	1.9.3p392 :098 > array[0][0]
	 => "a" 
	1.9.3p392 :099 > treehouse.delete_if {|key,value| key == 'a'}
	 => {"b"=>"2", "c"=>"3"} 


	 # Hash iteration

	1.9.3p392 :002 >   treehouse = {'a'=>1,'b'=>2,'c'=>3}
	 => {"a"=>1, "b"=>2, "c"=>3} 
	1.9.3p392 :003 > ap treehouse
	NoMethodError: undefined method `ap' for main:Object
		from (irb):3
		from /usr/local/rvm/rubies/ruby-1.9.3-p392/bin/irb:16:in `<main>'
	1.9.3p392 :004 > require 'awesome_print'
	 => true 
	1.9.3p392 :005 > ap treehouse
	{
	    "a" => 1,
	    "b" => 2,
	    "c" => 3
	}
	 => nil 
	1.9.3p392 :006 > 
	1.9.3p392 :007 >   treehouse.each do |key, value|
	1.9.3p392 :008 >     puts "#{key} --- #{value}"
	1.9.3p392 :009?>   end
	a --- 1
	b --- 2
	c --- 3
	 => {"a"=>1, "b"=>2, "c"=>3} 
	1.9.3p392 :010 > 
	1.9.3p392 :011 >   treehouse.each_pair {|key, value| puts "#{key} --- #{value}" }
	a --- 1
	b --- 2
	c --- 3
	 => {"a"=>1, "b"=>2, "c"=>3} 
	1.9.3p392 :012 > 
	1.9.3p392 :013 >   
	1.9.3p392 :014 >   treehouse.keys
	 => ["a", "b", "c"] 
	1.9.3p392 :015 > treehouse.each_key {|key| puts "key is #{key}"}
	key is a
	key is b
	key is c
	 => {"a"=>1, "b"=>2, "c"=>3} 
	1.9.3p392 :016 > 
	1.9.3p392 :017 >   treehouse.each_value {|value| puts "value is #{value}"}
	value is 1
	value is 2
	value is 3
	 => {"a"=>1, "b"=>2, "c"=>3} 
	 1.9.3p392 :039 >   
	1.9.3p392 :040 >   treehouse.select {|key, value| key == 'a'} 
	 => {"a"=>1} 
	1.9.3p392 :041 > treehouse.select! {|key, value| key == 'a'}
	 => {"a"=>1} 
	 1.9.3p392 :052 > treehouse['d'] = 5
	 => 5 
	1.9.3p392 :053 > ap treehouse
	{
	    "a" => 1,
	    "d" => 5
	}
	 => nil 
	1.9.3p392 :054 > ap treehouse
	{
	    "a" => 1,
	    "d" => 5
	}
	 => nil 
	1.9.3p392 :055 > treehouse.keep_if{|key,value| key=='a'}
	 => {"a"=>1} 
	1.9.3p392 :056 > 
	1.9.3p392 :057 >   treehouse
	 => {"a"=>1} 
	1.9.3p392 :058 > 


	# enumerable
		1.9.3p392 :004 > treehouse ={'a'=>1,'b'=>2,'c'=>3}
	 => {"a"=>1, "b"=>2, "c"=>3} 
	1.9.3p392 :005 > 
	1.9.3p392 :006 >   ap treehouse
	{
	    "a" => 1,
	    "b" => 2,
	    "c" => 3
	}
	 => nil 
	1.9.3p392 :007 > treehouse.find {|key,value| key=='a'}
	 => ["a", 1] 


Methods
	In ruby, there are instance and class methods
	The return value of the method IS THE LAST LINE of the method

	# Instance methods
		see single_method.rb
	
	ex:
		BankAccount2.rb

	1.9.3p392 :003 > load 'BankAccount2.rb'
	#<BankAccount:0x0000010092e8b0 @balance=0, @first_name="jack", @last_name="zhao">
	 => true 
	1.9.3p392 :004 > 
	1.9.3p392 :005 >   ba = BankAccount.new("a","b")
	 => #<BankAccount:0x0000010088f788 @balance=0, @first_name="a", @last_name="b"> 
	1.9.3p392 :006 > ba.deposit(100)
	 => 100 
	1.9.3p392 :007 > ba
	 => #<BankAccount:0x0000010088f788 @balance=100, @first_name="a", @last_name="b"> 
	1.9.3p392 :008 > ba.inspect
	 => "#<BankAccount:0x0000010088f788 @balance=100, @first_name=\"a\", @last_name=\"b\">" 
	1.9.3p392 :009 > puts ba.inspect
	#<BankAccount:0x0000010088f788 @balance=100, @first_name="a", @last_name="b">
	 => nil 
	1.9.3p392 :010 > ba.withdraw(100)
	 => 0 
	1.9.3p392 :011 > 


	# class method
	how to define class method:
		def self.name()
			xxx
		end

	OR

		class << self

			def name()
				xxx
			end
		end


	attr_reader :balance 
		# this will create following
			def balance
				@balance
			end
	attr_accessor :balance
		# will create reader and writter for you
			def balance=(items)
				@balance += items
			end

			def balance
				@balance
			end


	# Method Visibility
	ruby class method is public by default
	private method can be called inside of the class
	
	Two ways to define private method
	1. private   #anything under private keyword is private methods
		ex: private
			def reset!
				sxxxx
			end
	2. use "private :reset!"
		def reset!
			xxx
		end

		private :reset!

	usually we will define a public class method and call the private method inside of the public method
	ex:
		def call_the_reset_method
			reset!
		end

	3. protected method is pretty much likeprivate methods,expect protected methods CAN BE called by other instances of the same class
	ex:
		protected
		def protected_reset!
			@balance = 0
		end



loops
	see "/Users/Jack/Documents/ruby/loop.rb"
	ex:
		retry redo
		break next

blocks
	see "block.rb"
	create block
	yourBlock.call

	#working with block
	see "block-2.rb"
	check if the block is given or not
	if block_given?  # block_given is a given function
		yourBlock.call
	esle
		puts xxx
	end

	# exception
	see block-3.rb
	raise			---    		exception
	rescue			---			catch
	ensure			---			finally

	# BEGIN and END block
	see block-4.rb
	BEGIN { }this will always be excuted at the beginning of your program

	END {} this will always be excuted at the end of your program


	# keyword: yields
	see exmaple "yield.rb"
	yield and block.call has the same function BUT:
	the different betweet yield and block.call is that :
			yield can be call many times
			it can pass arguments to block 

Procs & Lambdas
	Procs and Lambdas are blocks of code that can be assigned to variables. Learn the different ways of creating procs and lambdas in this video.

	hwo to create proc and lambda
		proc:
			my_proc = Proc.new {}
			my_proc = proc {}

			my_proc.call arguments   # () is optional in all ruby method calls
			OR
			my_proc.call(arguments)

		lambdas:
			my_lambda = lambda {}
			my_lambda = -> {}

			my_lambda.call arguments
			OR
			my_lambda.call(arguments) 

	# work with proc and lambda
	the power of proc and lambda is they are bonded with what is calling them
	
	proc ex1:
		1.9.3p392 :006 >   my_proc =proc { |name| puts "hello, #{name}" }
		 => #<Proc:0x0000010084b858@(irb):6> 
		1.9.3p392 :007 > my_proc.call
		hello, 
		 => nil 
		1.9.3p392 :008 > my_proc.call "jack"
		hello, jack
		 => nil 
		1.9.3p392 :009 > my_proc.call("jason")
		hello, jason
		 => nil 
		1.9.3p392 :010 > 
	lambda ex2:
		1.9.3p392 :013 > my_lambda = lambda {|name| puts "Lambda said hello #{name}" }
		 => #<Proc:0x000001008376f0@(irb):13 (lambda)> 
		1.9.3p392 :014 > 
		1.9.3p392 :015 >   my_lambda.call("Jack")
		Lambda said hello Jack
		 => nil 
		1.9.3p392 :016 > 
		1.9.3p392 :016 > my_lambda.call
		ArgumentError: wrong number of arguments (0 for 1)
			from (irb):13:in `block in irb_binding'
			from (irb):16:in `call'
			from (irb):16
			from /usr/local/rvm/rubies/ruby-1.9.3-p392/bin/irb:16:in `<main>'
		1.9.3p392 :017 > 

		#the difference between proc and lambda
		1. when lambda calls, it must have the arguments it required for lambda.call function
			but proc can have no arguments at any time
		2, return value: see proc_and_lambda.rb
			return from proc
			return from who call the lambda

		# see example /Users/Jack/Documents/ruby/paper.rb 


Modules
	Modules serve as containers for data, classes, methods, or even other modules. Modules are very useful for sharing behavior between your classes and are frequently used for namespacing classes and constants in your programs.

	ex:	
	module.rb
		module ModuleOne
			MASCOT = "This is a consatnt"
		end

		1.9.3p392 :001 > load "module.rb"
		 => true 
		1.9.3p392 :002 > ModuleOne.inspect
		 => "ModuleOne" 
		1.9.3p392 :003 > ModuleOne.class
		 => Module 
		1.9.3p392 :004 > load "module.rb"
		 => true 
		1.9.3p392 :005 > ModuleOne.inspect
		 => "ModuleOne" 
		1.9.3p392 :006 > ModuleOne::MASCOT
		 => "This is a consatnt" 

	# put class in moudles, called namespacing
	ex module.rb
		module ModuleOne
			MASCOT = "This is a consatnt"

			class Frog
				attr_accessor :name
			end
		end

		1.9.3p392 :009 > load "module.rb"
		module.rb:2: warning: already initialized constant MASCOT
		 => true 
		1.9.3p392 :010 > 
		1.9.3p392 :014 > mike = ModuleOne::Frog.new
		 => #<ModuleOne::Frog:0x00000100a04780> 
		1.9.3p392 :015 > mike.name = "My name is Frogggg"
		 => "My name is Frogggg" 
		1.9.3p392 :016 > 
		1.9.3p392 :017 >   mike.inspect
		 => "#<ModuleOne::Frog:0x00000100a04780 @name=\"My name is Frogggg\">" 
		1.9.3p392 :018 > 

	# Extend and Include 
	There are two different ways to use modules in your programs: extend and include. In this first part of a two part series, learn about the differences.

	extend and the instance method to a class
	include  makes the module methods avaiable to class instances


	see example1
		 "extend_include.rb"

			module SayHello
				def say_hello
					puts "Hello #{@name}"
				end
			end


			class Hello

				include SayHello

				def initialize(name)
					@name = name
				end
			end

			hello = Hello.new("Jack")

			# use the extend keyword and extend our Hello instance hello
			#hello.extend SayHello

			hello.say_hello

	see example2
		"extend_include_2.rb"


Ruby Core
	The core collection of classes and modules helps out when coding Ruby programs. The Ruby Core badge walks you through some of the classes and modules available.

	# symbols
	Symbols represent names and strings in the Ruby interpreter. Symbols are only created once and referred to through the rest of the run time of the program. Learn how to create symbols and the optimal times to use them when writing your programs.

	the difference between symbol and string is:
	1. symbol (:xxx) only exists in memeory 
	2. symbol only be created once in ruby session

	three ways to use symbol in hash:
	 
	one:
	Shuais-MacBook-Pro:ruby Jack$ irb
	1.9.3p392 :001 > th ={'name'=> "jack", "location"=>"USA", "phone"=>"888888"}
	 => {"name"=>"jack", "location"=>"USA", "phone"=>"888888"} 
	1.9.3p392 :002 > th.inspect
	 => "{\"name\"=>\"jack\", \"location\"=>\"USA\", \"phone\"=>\"888888\"}" 
	1.9.3p392 :003 > th.class
	 => Hash 
	

	1.9.3p392 :004 > th2 = {:name =>"Jack", :location=>"USAAAA", :phone=>"21213"}
	 => {:name=>"Jack", :location=>"USAAAA", :phone=>"21213"} 
	1.9.3p392 :005 > th2.inspect
	 => "{:name=>\"Jack\", :location=>\"USAAAA\", :phone=>\"21213\"}" 
	1.9.3p392 :006 > th2.class
	 => Hash 



	 # data nd time
	 require 'date'
	 require 'time'


	1.9.3p392 :023 >   require 'date'
	 => true 
	1.9.3p392 :024 > require 'time'
	 => true 
	1.9.3p392 :025 > date = Date.new
	 => #<Date: -4712-01-01 ((0j,0s,0n),+0s,2299161j)> 
	1.9.3p392 :026 > puts date.to_s
	-4712-01-01
	 => nil 
	1.9.3p392 :027 > date = Date.new(2012,4,1,)
	 => #<Date: 2012-04-01 ((2456019j,0s,0n),+0s,2299161j)> 
	1.9.3p392 :028 > puts date.strftime("%m%d%y")
	040112
	 => nil 
	1.9.3p392 :029 > puts date.strftime("%b %d, %y")
	Apr 01, 12
	 => nil 
	1.9.3p392 :030 > date
	 => #<Date: 2012-04-01 ((2456019j,0s,0n),+0s,2299161j)> 
	1.9.3p392 :031 > date.mday
	 => 1 
	1.9.3p392 :032 > date.day
	 => 1 
	1.9.3p392 :033 > 
	1.9.3p392 :034 >   date.friday?
	 => false 
	1.9.3p392 :035 > date.sunday?
	 => true 
	1.9.3p392 :036 > date.month
	 => 4 
	1.9.3p392 :037 > date.wday
	 => 0 
	1.9.3p392 :038 > 
	1.9.3p392 :039 >   
	1.9.3p392 :040 >   date2 = Date.parse("2012/4/3")
	 => #<Date: 2012-04-03 ((2456021j,0s,0n),+0s,2299161j)> 
	1.9.3p392 :041 > date2 - date
	 => (2/1) 
	1.9.3p392 :042 > puts (date2 - date).to_i
	2
	 => nil 
	1.9.3p392 :043 > 
	1.9.3p392 :044 >   

	1.9.3p392 :046 > time =Time.new
	 => 2013-11-02 13:37:47 -0500 
	1.9.3p392 :047 > time =Time.new
	 => 2013-11-02 13:37:49 -0500 
	1.9.3p392 :048 > time =Time.new
	 => 2013-11-02 13:37:50 -0500 
	1.9.3p392 :049 > 


	# Enumerable Module
	http://ruby-doc.org/core-1.9.3/Enumerable.html
	inside of class definition
		include Enumerable 


	# comparable Module
	http://ruby-doc.org/core-1.9.3/Comparable.html
	inside of class definition
		include Comparable

	# IO
	http://ruby-doc.org/core-1.9.3/IO.html
	see example "io.rb"

	# Struct
	Structs are a quick way to bundle attributes together without having to write your own custom class. This video walks through creating your own structs and quickly using them.

	see struct.rb


Ruby Standard Library
	The Ruby standard library is packaged with every Ruby installation. 

	The standard library contains modules and classes that are commonly used for writing programs. This includes functionality for testing, configuration, option parsing, benchmarking, and more. The Ruby Standard Library badge walks through some of the modules and classes available in the standard library.

	# YAML
	YAML stands for "Yet Another Markup Language." YAML is a plain text and human readable format that is frequently used for configuration files. The YAML video teaches you how to use YAML in your Ruby programs.
	see "yaml.rb"


	# ERB
	embedded ruby
	http://www.ruby-doc.org/stdlib-2.0.0/libdoc/erb/rdoc/ERB.html

	see erb.rb

	<%= %>	print 
	<% %>	no print


	# FileUtils
	The FileUtils module allows you to interact with the file system in your Ruby programs. The FileUtils video walks through some common uses of the FileUtils module.

	http://ruby-doc.org/stdlib-1.9.3/libdoc/fileutils/rdoc/FileUtils.html

	1.9.3p392 :001 > require 'fileutils'
	 => true 
	1.9.3p392 :002 > 
	1.9.3p392 :003 >   here = File.dirname(__FILE__)
	 => "." 
	1.9.3p392 :004 > puts File.expand_path(here)
	/Users/Jack/Documents/ruby
	 => nil 
	1.9.3p392 :005 > puts Dir.entries(here)
	.
	..
	.git
	BankAccount.rb
	BankAccount2.rb
	block-2.rb
	block-3.rb
	block-4.rb
	block.rb
	config.yml
	control_flow.rb
	erb.rb
	examples.rb
	extend_include.rb
	extend_include_2.rb
	hello.rb
	io.rb
	loop.rb
	module.rb
	my_file.txt
	notes.txt
	paper.rb
	proc_and_lambda.rb
	README
	ruby_1_9_3_core
	ruby_notes.txt
	single_method.rb
	struct.rb
	symbol.rb
	yaml.rb
	yield.rb
	 => nil 
	1.9.3p392 :006 > FileUtils.mk
	FileUtils.mkdir    FileUtils.mkdir_p  FileUtils.mkpath   
	1.9.3p392 :006 > FileUtils.mkdir_p(here + '/stuff')
	 => ["./stuff"] 
	1.9.3p392 :007 > puts Dir.entries(here)
	.
	..
	.git
	BankAccount.rb
	BankAccount2.rb
	block-2.rb
	block-3.rb
	block-4.rb
	block.rb
	config.yml
	control_flow.rb
	erb.rb
	examples.rb
	extend_include.rb
	extend_include_2.rb
	hello.rb
	io.rb
	loop.rb
	module.rb
	my_file.txt
	notes.txt
	paper.rb
	proc_and_lambda.rb
	README
	ruby_1_9_3_core
	ruby_notes.txt
	single_method.rb
	struct.rb
	stuff
	symbol.rb
	yaml.rb
	yield.rb
	 => nil 

	 # FileUtils copy/remove files
	1.9.3p392 :014 >   puts FileUtils.cmp(path1, path2)
	1.9.3p392 :015 > FileUtils.touch "newFile"
	 => ["newFile"] 
	 1.9.3p392 :018 > FileUtils.cp 'newFile', 'newFile2'
	 => nil 
	 1.9.3p392 :019 > FileUtils.remove 'newFile'
	 => ["newFile"] 
	1.9.3p392 :020 > FileUtils.remove 'newFile2'
	 => ["newFile2"] 


	 # Logger

	 see "logger.rb"
	 Saving output in your programs is very helpful when debugging them. The Logger class provides a built in way of logging at different levels automatically. The logger video walks through creating logger instances in your own classes.

	 http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html

	 # URI

	 URI stands for "Uniform Resource Identifier." The URI module can be used to parse and manipulate URIs in your Ruby programs.

	 http://www.ruby-doc.org/stdlib-1.9.3/libdoc/uri/rdoc/URI.html

	 see 'uri.rb'


	 #Benchamrk
	 http://www.ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html

	 Benchmarking is the process of measuring how long certain parts of programs take to run. The Benchmark module provides a common starting point for benchmarking your programs.

	 see "benchmark.rb"


optParse


	It is common to allow command line programs to accept options, or flags. The OptionParser class provides a common way of parsing command line arguments and displaying help text.

	http://ruby-doc.org/stdlib-1.9.3/libdoc/optparse/rdoc/OptionParser.html

	see 'optparse.rb'

obserable
	The Observable module allows you to easily implement the observer pattern in your classes. The observer pattern specifies that an object maintains a list of its dependents, called observers, and notifies them automatically of any state changes.
	
	http://ruby-doc.org/stdlib-1.9.3/libdoc/observer/rdoc/Observable.html

	see "obserable.rb"



Testing
	Automated testing is the process of writing code that tests different behavior of your programs. The Ruby standard library includes a library called MiniTest which can be used to write automated tests. The Ruby Testing Badge walks through using the MiniTest library and introduces the process of test driven development.

	# MiniTest
	MiniTest is an automated testing library that comes with Ruby. In the MiniTest video, we'll learn how to include MiniTest in our projects, write automated tests, and learn about assertions.

	see "minitest.rb"


	# MiniTest::Spec
	The Spec library in MiniTest allows one to use a different syntax to write automated tests. Learn how to write tests with minitest/spec and the different way of using the built in assertions with the spec library.

	see minitestspec.rb
	http://www.ruby-doc.org/stdlib-1.9.3/libdoc/minitest/spec/rdoc/MiniTest/Spec.html


	# Test Driven Development
	Test Driven Development is the process of writing tests for your program before you write the code

	


































